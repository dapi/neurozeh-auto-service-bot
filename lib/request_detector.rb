# frozen_string_literal: true

require 'ruby_llm'
require 'telegram/bot'

class RequestDetector < RubyLLM::Tool
  description "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞—è–≤–∫–æ–π –Ω–∞ —É—Å–ª—É–≥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —á–∞—Ç"

  param :message_text, desc: "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
  param :user_id, desc: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram", type: :integer
  param :username, desc: "Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required: false
  param :first_name, desc: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required: false
  param :conversation_context, desc: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)", required: false

  def initialize(config, logger = nil)
    @config = config
    @logger = logger || Logger.new(IO::NULL)
  end

  def execute(message_text:, user_id:, username: nil, first_name: nil, conversation_context: nil)
    @logger.info "RequestDetector analyzing message from user #{user_id}: #{message_text[0..50]}..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    admin_chat_id = @config.respond_to?(:admin_chat_id) ? @config.admin_chat_id : nil
    unless admin_chat_id
      @logger.warn "Admin chat not configured, skipping request detection"
      return { error: "Admin chat not configured" }
    end

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞—è–≤–∫–∏
    request_info = analyze_request(message_text, conversation_context)

    if request_info[:is_request]
      @logger.info "Request detected: #{request_info[:type]} - #{request_info[:confidence]} confidence"
      result = send_to_admin_chat(request_info, user_id, username, first_name, admin_chat_id)

      if result[:success]
        return {
          success: true,
          request_type: request_info[:type],
          message: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        }
      else
        return {
          success: false,
          error: result[:error]
        }
      end
    else
      @logger.debug "Message is not a request: #{request_info[:reason]}"
      return {
        success: false,
        reason: request_info[:reason]
      }
    end
  rescue StandardError => e
    @logger.error "Error in RequestDetector: #{e.message}"
    @logger.error e.backtrace.first(5).join("\n") if e.backtrace
    { error: e.message }
  end

  private

  def analyze_request(message_text, conversation_context)
    text = message_text.downcase

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    request_patterns = {
      # –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∑–∞–ø–∏—Å—å (–Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      booking: {
        patterns: [
          /–∑–∞–ø–∏—Å–∞—Ç?/, /–∑–∞–ø–∏—Å—å/, /—Ö–æ—á—É –Ω–∞ —Å–µ—Ä–≤–∏—Å/, /–Ω—É–∂–µ–Ω —Å–µ—Ä–≤–∏—Å/,
          /–∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–µ—Ö–∞—Ç—å/, /–∑–∞–ø–∏—à–∏—Ç–µ/, /–∑–∞–ø–∏—à–µ—Ç–µ/, /–∑–∞–ø–∏—Å–∞—Ç—å—Å—è/,
          /–∫–æ–≥–¥–∞/, /—Å–º–æ–≥—É/, /–ø—Ä–∏–µ—Ö–∞—Ç—å/
        ],
        weight: 0.95
      },

      # –ó–∞–ø—Ä–æ—Å—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      pricing: {
        patterns: [
          /—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç/, /—Ü–µ–Ω–∞/, /—Å—Ç–æ–∏–º–æ—Å—Ç—å/, /—Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏/,
          /—Å–º–µ—Ç–∞/, /–ø—Ä–∞–π—Å/, /—Ü–µ–Ω—É/, /—Å—Ç–æ–∏—Ç/
        ],
        weight: 0.9
      },

      # –ó–∞–ø—Ä–æ—Å—ã —É—Å–ª—É–≥ –∏ —Ä–µ–º–æ–Ω—Ç–∞ (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      service: {
        patterns: [
          /\b–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫/, /\b–ø—Ä–æ–≤–µ—Ä–∏—Ç—å/, /\b–æ—Å–º–æ—Ç—Ä/, /\b–∑–∞–º–µ–Ω–∞/,
          /\b—Ç–æ\b/, /\b–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ/, /\b—Ç–æ–∂—É/, /\b—Ç–æ-/, /\b—Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ/
          # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –¥—Ä—É–≥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        ],
        weight: 0.8
      },

      # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      consultation: {
        patterns: [
          /\b–ø–æ–º–æ–≥–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å\b/, /\b–ø–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ\b/, /\b–∫–∞–∫ –ª—É—á—à–µ\b/,
          /\b—á—Ç–æ –¥–µ–ª–∞—Ç—å\b/, /\b–ø—Ä–æ–±–ª–µ–º–∞ —Å\b/, /\b—Å–ª–æ–º–∞–ª–æ—Å—å/,
          /\b–≤—ã–±—Ä–∞—Ç—å\b/, /\b—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\b/, /\b–ª—É—á—à–∏–µ\b/
        ],
        weight: 0.7
      }
    }

    max_score = 0
    request_type = nil
    matched_patterns = []

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    request_patterns.each do |type, config|
      score = 0
      config[:patterns].each do |pattern|
        if text.match?(pattern)
          score += config[:weight]
          matched_patterns << "#{type}:#{pattern.source}"
        end
      end

      if score > max_score
        max_score = score
        request_type = type
      end
    end

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    confidence_multiplier = 1.0

    # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ–ª—å—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—â–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞—è–≤–∫–∏)
    if message_text.length > 50
      confidence_multiplier += 0.1
    end

    # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    if message_text.include?('?')
      confidence_multiplier += 0.05
    end

    # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if conversation_context && is_continuation_of_request?(conversation_context)
      confidence_multiplier += 0.15
    end

    final_score = max_score * confidence_multiplier
    threshold = 0.6  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏

    if final_score >= threshold
      return {
        is_request: true,
        type: request_type,
        confidence: final_score,
        matched_patterns: matched_patterns,
        original_text: message_text
      }
    else
      return {
        is_request: false,
        reason: "Score #{final_score.round(2)} below threshold #{threshold}",
        score: final_score
      }
    end
  end

  def is_continuation_of_request?(context)
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å–ª—É–≥
    context_text = context.downcase
    service_keywords = %w[—Ä–µ–º–æ–Ω—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–º–µ–Ω–∞ —Ç–æ]
    service_keywords.any? { |keyword| context_text.include?(keyword) }
  end

  def send_to_admin_chat(request_info, user_id, username, first_name, admin_chat_id)
    begin
      # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
      notification = format_admin_notification(request_info, user_id, username, first_name)

      # –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      telegram_token = @config.respond_to?(:telegram_bot_token) ? @config.telegram_bot_token : nil
      bot = Telegram::Bot::Client.new(telegram_token)

      bot.api.send_message(
        chat_id: admin_chat_id,
        text: notification,
        parse_mode: 'Markdown'
      )

      @logger.info "Request notification sent to admin chat #{admin_chat_id}"
      { success: true }
    rescue Telegram::Bot::Exceptions::ResponseError => e
      @logger.error "Failed to send admin notification: #{e.message}"
      { error: "Telegram API error: #{e.message}" }
    rescue StandardError => e
      @logger.error "Unexpected error sending admin notification: #{e.message}"
      { error: "Unexpected error: #{e.message}" }
    end
  end

  def format_admin_notification(request_info, user_id, username, first_name)
    user_link = if username
                   "@#{username}"
                 else
                   first_name || "User##{user_id}"
                 end

    type_mapping = {
      :booking => "üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–∏—Å",
      :pricing => "üí∞ –ó–∞–ø—Ä–æ—Å —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
      :service => "üîß –ó–∞–ø—Ä–æ—Å —É—Å–ª—É–≥–∏",
      :consultation => "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
    }

    request_type_display = type_mapping[request_info[:type]] || "üìù –ó–∞–ø—Ä–æ—Å"

    notification = "üîî **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê**\n\n"
    notification += "üë§ **–ö–ª–∏–µ–Ω—Ç:** #{user_link} - `#{user_id}`\n"
    notification += "üìã **–¢–∏–ø:** #{request_type_display}\n"
    notification += "‚è∞ **–í—Ä–µ–º—è:** #{Time.now.strftime('%Y-%m-%d %H:%M')}\n"
    notification += "üéØ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** #{(request_info[:confidence] * 100).round(1)}%\n\n"

    if request_info[:matched_patterns]&.any?
      notification += "üîç **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:**\n"
      request_info[:matched_patterns].first(3).each do |pattern|
        type, pattern_text = pattern.split(':', 2)
        notification += "‚Ä¢ #{type}: `#{pattern_text}`\n"
      end
      notification += "\n"
    end

    notification += "üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n"
    notification += "```\n#{request_info[:original_text]}\n```\n\n"

    notification += "üîó **–î–µ–π—Å—Ç–≤–∏—è:**\n"
    notification += "/answer_#{user_id} - –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É\n"
    notification += "/close_#{user_id} - –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É"

    notification
  end
end