# frozen_string_literal: true

require 'ruby_llm'
require 'telegram/bot'

class RequestDetector < RubyLLM::Tool
  description "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞—è–≤–∫–æ–π –Ω–∞ —É—Å–ª—É–≥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —á–∞—Ç"

  param :message_text, desc: "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
  param :user_id, desc: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram", type: :integer
  param :username, desc: "Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required: false
  param :first_name, desc: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required: false
  param :conversation_context, desc: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)", required: false
  param :car_info, desc: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –∫–ª–∞—Å—Å, –ø—Ä–æ–±–µ–≥)", required: false
  param :required_services, desc: "–ü–µ—Ä–µ—á–µ–Ω—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–±–æ—Ç", required: false
  param :cost_calculation, desc: "–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥", required: false
  param :dialog_context, desc: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏", required: false

  def initialize(config, logger = nil)
    @config = config
    @logger = logger || Logger.new(IO::NULL)
    @enriched_data = {}
  end

  # –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–≤–Ω–µ
  def enrich_with(car_info:, required_services:, cost_calculation:, dialog_context:)
    @enriched_data = {
      car_info: car_info,
      required_services: required_services,
      cost_calculation: cost_calculation,
      dialog_context: dialog_context
    }
    @logger.debug "RequestDetector enriched with data: #{@enriched_data.keys}"
  end

  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  def enriched_data
    @enriched_data
  end

  def execute(message_text:, user_id:, username: nil, first_name: nil, conversation_context: nil,
              car_info: nil, required_services: nil, cost_calculation: nil, dialog_context: nil)
    @logger.info "Request detected for user #{user_id}: #{message_text[0..50]}..."

    # LLM —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª(–∞), —á—Ç–æ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É, –ø–æ—ç—Ç–æ–º—É —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
    @logger.info "Processing service request - confirmed by LLM"
    admin_chat_id = @config.respond_to?(:admin_chat_id) ? @config.admin_chat_id : nil

    # –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    final_car_info = @enriched_data[:car_info] || car_info
    final_required_services = @enriched_data[:required_services] || required_services
    final_cost_calculation = @enriched_data[:cost_calculation] || cost_calculation
    final_dialog_context = @enriched_data[:dialog_context] || dialog_context

    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏
    request_info = {
      confidence: 1.0, # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —Ç.–∫. –≤—ã–∑–≤–∞–Ω–æ LLM
      original_text: message_text || '',
      car_info: final_car_info || {},
      required_services: final_required_services || [],
      cost_calculation: final_cost_calculation || {},
      dialog_context: final_dialog_context || ''
    }

    result = send_to_admin_chat(request_info, user_id, username, first_name, admin_chat_id)

    if result[:success]
      return {
        success: true,
        message: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
      }
    else
      return {
        success: false,
        error: result[:error]
      }
    end
  rescue StandardError => e
    @logger.error "‚ùå REQUEST ERROR: #{e.class}: #{e.message}"
    @logger.error "Full backtrace:"
    e.backtrace&.each { |line| @logger.error "  #{line}" }
    { error: e.message }
  end

  private

  def send_to_admin_chat(request_info, user_id, username, first_name, admin_chat_id)
    begin
      # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
      notification = format_admin_notification(request_info, user_id, username, first_name)

      # –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      telegram_token = @config.respond_to?(:telegram_bot_token) ? @config.telegram_bot_token : nil
      bot = Telegram::Bot::Client.new(telegram_token)

      bot.api.send_message(
        chat_id: admin_chat_id,
        text: notification,
        parse_mode: 'Markdown'
      )

      @logger.info "Request notification sent to admin chat #{admin_chat_id}"
      { success: true }
    rescue Telegram::Bot::Exceptions::ResponseError => e
      @logger.error "Failed to send admin notification: #{e.message}"
      { error: "Telegram API error: #{e.message}" }
    rescue StandardError => e
      @logger.error "‚ùå REQUEST ERROR: Unexpected error sending admin notification: #{e.class}: #{e.message}"
      @logger.error "Full backtrace:"
      e.backtrace&.each { |line| @logger.error "  #{line}" }
      { error: "Unexpected error: #{e.message}" }
    end
  end

  def format_admin_notification(request_info, user_id, username, first_name)
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    notification = format_basic_info(request_info, user_id, username, first_name)

    # –û–±–æ–≥–∞—â–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    notification += format_car_info(request_info[:car_info])
    notification += format_required_services(request_info[:required_services])
    notification += format_cost_calculation(request_info[:cost_calculation])
    notification += format_dialog_context(request_info[:dialog_context])
    notification += format_action_buttons(user_id)

    notification
  end

  def format_basic_info(request_info, user_id, username, first_name)
    user_link = if username
                   "[@#{username}](https://t.me/#{username})"
                 else
                   first_name || "User##{user_id}"
                 end

    notification = "üîî **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê**\n\n"
    notification += "üë§ **–ö–ª–∏–µ–Ω—Ç:** #{user_link} - `#{user_id}`\n\n"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    if request_info[:matched_patterns] && !request_info[:matched_patterns].empty?
      notification += "üîç **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:**\n"
      Array(request_info[:matched_patterns]).first(3).each do |pattern|
        # Ensure pattern is a string before splitting
        pattern_str = pattern.to_s
        type, pattern_text = pattern_str.split(':', 2)
        notification += "‚Ä¢ #{type}: `#{pattern_text}`\n"
      end
      notification += "\n"
    end

    notification += "üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n"
    notification += "```\n#{request_info[:original_text]}\n```\n\n"

    notification
  end

  def format_car_info(car_info)
    return "" unless car_info && !car_info.empty?

    info = "\nüöó **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:**\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    has_data = false

    if car_info[:make_model]
      info += "‚Ä¢ **–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å:** #{car_info[:make_model]}\n"
      has_data = true
    end

    if car_info[:year]
      info += "‚Ä¢ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** #{car_info[:year]}\n"
      has_data = true
    end

    if car_info[:class]
      class_desc = car_info[:class_description] || car_info[:class]
      info += "‚Ä¢ **–ö–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** #{class_desc}\n"
      has_data = true
    else
      info += "‚Ä¢ **–ö–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ\n"
      has_data = true
    end

    if car_info[:mileage]
      info += "‚Ä¢ **–ü—Ä–æ–±–µ–≥:** #{car_info[:mileage]}\n"
      has_data = true
    end

    info += "\n" if has_data
    info
  end

  def format_required_services(services)
    return "" unless services && !services.empty?

    info = "\nüîß **–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–±–æ—Ç—ã:**\n"
    Array(services).each_with_index do |service, index|
      # Ensure service is convertible to string
      service_str = service.to_s
      info += "#{index + 1}. #{service_str}\n"
    end
    info += "\n"
  end

  def format_cost_calculation(cost_data)
    return "" unless cost_data && !cost_data.empty?

    info = "\nüí∞ **–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**\n"
    has_data = false

    if cost_data[:services] && !cost_data[:services].empty?
      Array(cost_data[:services]).each do |service|
        # Ensure service is a hash with expected keys
        if service.is_a?(Hash)
          service_name = service[:name] || service['name'] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞'
          service_price = service[:price] || service['price'] || '–ø–æ –∑–∞–ø—Ä–æ—Å—É'
          info += "‚Ä¢ #{service_name}: #{service_price}\n"
        else
          info += "‚Ä¢ #{service.to_s}\n"
        end
      end
      has_data = true
    end

    if cost_data[:total]
      info += "‚Ä¢ **–ò—Ç–æ–≥–æ –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** #{cost_data[:total]}\n"
      has_data = true
    end

    note = cost_data[:note] || '–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'
    info += "‚Ä¢ *#{note}*\n"
    has_data = true

    info += "\n" if has_data
    info
  end

  def format_dialog_context(context)
    return "" unless context && !context.to_s.strip.empty?

    info = "\nüí¨ **–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:**\n"
    info += "#{context}\n\n"
    info
  end

  def format_action_buttons(user_id)
    "\nüîó **–î–µ–π—Å—Ç–≤–∏—è:**\n/answer_#{user_id} - –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É\n/close_#{user_id} - –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É\n"
  end
end
