# frozen_string_literal: true

require 'anthropic'
require 'logger'
require 'net/http'
require 'uri'
require 'openssl'

class ClaudeClient
  MAX_RETRIES = 1

  def initialize(config, logger = Logger.new($stdout))
    @config = config
    @logger = logger

    # anyway_config —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–ª —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
    @system_prompt = load_system_prompt

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç (anyway_config –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞)
    @price_list = load_and_format_price_list

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Anthropic –∫–ª–∏–µ–Ω—Ç
    @client = Anthropic::Client.new()

    @logger.info 'ClaudeClient initialized with anthropic gem, system prompt and price list'
  end

  def send_message(messages)
    @logger.info "Sending message to Claude API with #{messages.length} messages"

    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º
    combined_system_prompt = "#{@system_prompt}\n\n---\n\n## –ü–†–ê–ô–°-–õ–ò–°–¢\n\n#{@price_list}"

    retries = 0
    begin
      response = @client.messages.create(
        model: @config.anthropic_model,
        max_tokens: 1500, # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
        system: combined_system_prompt,
        messages: messages
      )

      # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ anthropic gem
      content = response.content.first
      if content.is_a?(Anthropic::Models::TextBlock)
        content.text
      else
        @logger.error "Unexpected response content type: #{content.class}"
        raise 'Unexpected response format from Claude API'
      end
    rescue Anthropic::Errors::AuthenticationError => e
      @logger.error "Authentication error: #{e.message}"
      raise e
    rescue Anthropic::Errors::RateLimitError => e
      @logger.error "Rate limit error: #{e.message}"
      raise e
    rescue Anthropic::Errors::APIError => e
      @logger.error "Claude API error: #{e.message}"
      @logger.error "Status: #{e.status}" if e.status
      @logger.error "Body: #{e.body}" if e.body
      raise e
    rescue StandardError => e
      retries += 1
      if retries <= MAX_RETRIES
        @logger.warn "Error sending message to Claude API, retrying (#{retries}/#{MAX_RETRIES}): #{e.message}"
        @logger.warn "Error class: #{e.class}"
        @logger.warn "Error backtrace: #{e.backtrace&.first(5)&.join(', ')}"
        sleep(1) # Wait before retrying
        retry
      else
        @logger.error "Failed to send message to Claude API after #{MAX_RETRIES} retries: #{e.message}"
        @logger.error "Final error class: #{e.class}"
        @logger.error "Final error backtrace: #{e.backtrace&.first(10)&.join("\n")}"
        @logger.error "API configuration - Model: #{@config.anthropic_model}, Base URL: #{@config.anthropic_base_url}"
        @logger.error "Token present: #{@config.anthropic_auth_token && !@config.anthropic_auth_token.empty? ? 'YES' : 'NO'}"
        raise e
      end
    end
  end

  private

  def load_system_prompt
    # anyway_config —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É
    path = @config.system_prompt_path
    content = File.read(path, encoding: 'UTF-8')

    if content.strip.empty?
      @logger.error "System prompt file is empty: #{path}"
      raise "System prompt file is empty: #{path}"
    end

    content
  rescue StandardError => e
    @logger.error "Failed to load system prompt: #{e.message}"
    raise e
  end

  def load_and_format_price_list
    price_list_path = @config.price_list_path

    # anyway_config —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ñ–∞–π–ª–∞
    content = File.read(price_list_path, encoding: 'UTF-8')

    if content.strip.empty?
      @logger.error "Price list file is empty: #{price_list_path}"
      return '‚ùå –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.'
    end

    format_price_list_for_claude(content)
  rescue StandardError => e
    @logger.error "Failed to load price list: #{e.message}"
    '‚ùå –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.'
  end

  def format_price_list_for_claude(csv_content)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
    lines = csv_content.split("\n").reject(&:empty?)

    formatted = "üìã –ê–ö–¢–£–ê–õ–¨–ù–´–ô –ü–†–ê–ô–°-–õ–ò–°–¢ –ê–í–¢–û–°–ï–†–í–ò–°–ê '–ö–£–ó–ù–ò–ö'\n\n"

    lines.each do |line|
      next if line.strip.empty?

      # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      formatted += if line.match?(/^[A-Z–ê-–Ø–Å]+/i) || line.include?('–ö–ª–∞—Å—Å') || line.include?('–∫–ª–∞—Å—Å')
                     "üìã #{line}\n"
                   else
                     "#{line}\n"
                   end
    end

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    formatted += "\n#{'‚îÄ' * 50}\n"
    formatted += "‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:\n"
    formatted += "‚Ä¢ –í—Å–µ —Ü–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –ó–ê –≠–õ–ï–ú–ï–ù–¢ –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç\n"
    formatted += "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ —ç—Ç–æ–º—É –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—É\n"
    formatted += "‚Ä¢ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n"
    formatted += "#{'‚îÄ' * 50}\n"

    formatted
  end

end
