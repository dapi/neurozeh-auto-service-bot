# frozen_string_literal: true

require 'ruby_llm'
require 'logger'

class RubyLLMClient
  MAX_RETRIES = 1

  def initialize(config, logger = Logger.new($stdout))
    @config = config
    @logger = logger

    # anyway_config —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–ª —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
    @system_prompt = load_system_prompt

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç (anyway_config –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞)
    @price_list = load_and_format_price_list

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RubyLLM
    configure_ruby_llm

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç
    @chat = RubyLLM.chat(model: @config.ruby_llm_model || @config.anthropic_model)

    @logger.info 'RubyLLMClient initialized with ruby_llm gem, system prompt and price list'
  end

  def send_message(messages)
    @logger.info "Sending message to RubyLLM with #{messages.length} messages"

    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º
    combined_system_prompt = "#{@system_prompt}\n\n---\n\n## –ü–†–ê–ô–°-–õ–ò–°–¢\n\n#{@price_list}"

    retries = 0
    begin
      # –í—ã–±–∏—Ä–∞–µ–º —á–∞—Ç: –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
      chat = get_chat_for_request

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      chat.with_instructions(combined_system_prompt, replace: true)

      # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      last_message = messages.last
      raise ArgumentError, 'No messages to send' unless last_message
      raise ArgumentError, 'Last message is not from user' unless last_message[:role] == 'user'

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
      response = chat.ask(last_message[:content])

      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
      response.content
    rescue RubyLLM::ConfigurationError => e
      @logger.error "RubyLLM configuration error: #{e.message}"
      raise e
    rescue RubyLLM::ModelNotFoundError => e
      @logger.error "Model not found error: #{e.message}"
      raise e
    rescue RubyLLM::Error => e
      @logger.error "RubyLLM API error: #{e.message}"
      raise e
    rescue StandardError => e
      retries += 1
      if retries <= MAX_RETRIES
        @logger.warn "Error sending message to RubyLLM, retrying (#{retries}/#{MAX_RETRIES}): #{e.message}"
        @logger.warn "Error class: #{e.class}"
        @logger.warn "Error backtrace: #{e.backtrace&.first(5)&.join(', ')}"
        sleep(1) # Wait before retrying
        retry
      else
        @logger.error "Failed to send message to RubyLLM after #{MAX_RETRIES} retries: #{e.message}"
        @logger.error "Final error class: #{e.class}"
        @logger.error "Final error backtrace: #{e.backtrace&.first(10)&.join("\n")}"
        @logger.error "API configuration - Model: #{@config.ruby_llm_model || @config.anthropic_model}"
        @logger.error "Token present: #{@config.anthropic_auth_token && !@config.anthropic_auth_token.empty? ? 'YES' : 'NO'}"
        raise e
      end
    end
  end

  private

  def get_chat_for_request
    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    return get_custom_chat if @custom_context

    # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–∞—Ç
    @chat
  end

  def get_custom_chat
    # –ï—Å–ª–∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI —Ñ–æ—Ä–º–∞—Ç
    if @use_openai_format
      @custom_context.chat(model: @config.ruby_llm_model || @config.anthropic_model, provider: :openai)
    else
      # –ò—Å–ø–æ–ª—å–∑—É–µ–º Anthropic —Ñ–æ—Ä–º–∞—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      @custom_context.chat(model: @config.ruby_llm_model || @config.anthropic_model, provider: :anthropic)
    end
  end

  def configure_ruby_llm
    RubyLLM.configure do |config|
      # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω anthropic –∫–∞–∫ —Ç–æ–∫–µ–Ω –¥–ª—è Anthropic –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ ruby_llm
      config.anthropic_api_key = @config.anthropic_auth_token

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –∏ retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      config.request_timeout = 120
      config.max_retries = MAX_RETRIES
    end

    # –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ API URL –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    return unless @config.anthropic_base_url && @config.anthropic_base_url != 'https://api.anthropic.com'

    @logger.info "Using custom base URL: #{@config.anthropic_base_url}"
    configure_custom_endpoint
  end

  def configure_custom_endpoint
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º endpoint
    @custom_context = RubyLLM.context do |config|
      config.anthropic_api_key = @config.anthropic_auth_token
      config.request_timeout = 120
      config.max_retries = MAX_RETRIES

      # –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö endpoints –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
      # –í ruby_llm —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞
      if @config.anthropic_base_url.include?('api.z.ai')
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è api.z.ai
        configure_z_ai_endpoint(config)
      end
    end
  end

  def configure_z_ai_endpoint(config)
    # –î–ª—è api.z.ai –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI-—Å–æ–≤Compatible —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Anthropic-—Ñ–æ—Ä–º–∞—Ç —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º URL

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–Ω –ª–∏ —è–≤–Ω—ã–π openai_api_base –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    if @config.openai_api_base && !@config.openai_api_base.empty?
      @logger.info "Using explicit OpenAI-compatible endpoint from config: #{@config.openai_api_base}"
      config.openai_api_key = @config.anthropic_auth_token
      config.openai_api_base = @config.openai_api_base
      @use_openai_format = true
      return
    end

    # –ï—Å–ª–∏ —è–≤–Ω—ã–π endpoint –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π endpoint
    z_ai_openai_url = @config.anthropic_base_url.gsub('/api/anthropic', '/v1')

    begin
      # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint
      require 'net/http'
      require 'uri'

      uri = URI(z_ai_openai_url)
      response = Net::HTTP.get_response(uri)

      if response.code == '200'
        @logger.info "Using auto-detected OpenAI-compatible endpoint: #{z_ai_openai_url}"
        config.openai_api_key = @config.anthropic_auth_token
        config.openai_api_base = z_ai_openai_url
        @use_openai_format = true
      end
    rescue StandardError => e
      @logger.warn "OpenAI-compatible endpoint not available, using Anthropic format: #{e.message}"
    end
  end

  def load_system_prompt
    # anyway_config —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É
    path = @config.system_prompt_path
    content = File.read(path, encoding: 'UTF-8')

    if content.strip.empty?
      @logger.error "System prompt file is empty: #{path}"
      raise "System prompt file is empty: #{path}"
    end

    content
  rescue StandardError => e
    @logger.error "Failed to load system prompt: #{e.message}"
    raise e
  end

  def load_and_format_price_list
    price_list_path = @config.price_list_path

    # anyway_config —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ñ–∞–π–ª–∞
    content = File.read(price_list_path, encoding: 'UTF-8')

    if content.strip.empty?
      @logger.error "Price list file is empty: #{price_list_path}"
      return '‚ùå –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.'
    end

    format_price_list_for_claude(content)
  rescue StandardError => e
    @logger.error "Failed to load price list: #{e.message}"
    '‚ùå –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.'
  end

  def format_price_list_for_claude(csv_content)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
    lines = csv_content.split("\n").reject(&:empty?)

    formatted = "üìã –ê–ö–¢–£–ê–õ–¨–ù–´–ô –ü–†–ê–ô–°-–õ–ò–°–¢ –ê–í–¢–û–°–ï–†–í–ò–°–ê '–ö–£–ó–ù–ò–ö'\n\n"

    lines.each do |line|
      next if line.strip.empty?

      # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      formatted += if line.match?(/^[A-Z–ê-–Ø–Å]+/i) || line.include?('–ö–ª–∞—Å—Å') || line.include?('–∫–ª–∞—Å—Å')
                     "üìã #{line}\n"
                   else
                     "#{line}\n"
                   end
    end

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    formatted += "\n#{'‚îÄ' * 50}\n"
    formatted += "‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:\n"
    formatted += "‚Ä¢ –í—Å–µ —Ü–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –ó–ê –≠–õ–ï–ú–ï–ù–¢ –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç\n"
    formatted += "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ —ç—Ç–æ–º—É –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—É\n"
    formatted += "‚Ä¢ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n"
    formatted += "#{'‚îÄ' * 50}\n"

    formatted
  end
end
