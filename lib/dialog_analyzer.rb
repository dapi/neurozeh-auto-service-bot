# frozen_string_literal: true

class DialogAnalyzer
  # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
  PATTERNS = {
    # –ú–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤ –†–æ—Å—Å–∏–∏)
    car_brands: /\b(toyota|hyundai|kia|bmw|mercedes|lada|renault|daewoo|chevrolet|honda|nissan|volkswagen|audi|mazda|ford|mitsubishi|skoda|opel|peugeot|citroen|suzuki|subaru|lexus|infiniti|acura|jaguar|land rover|volvo|mini|smart|porsche|ferrari|lamborghini|maserati|bentley|rolls-royce|bugatti)\b/i,

    # –ú–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ)
    car_models: {
      'toyota' => /\b(camry|corolla|land cruiser|prado|hilux|hiace|yaris|auris|avensis|verso|rav4|highlander|sienna|sequoia|tacoma|tundra)\b/i,
      'hyundai' => /\b(solaris|creta|santa fe|elantra|i20|i30|i40|accent|sonata|genesis|equus|tucson|ix35|ix55|getz|matrix|veloster)\b/i,
      'kia' => /\b(rio|optima|sorento|sportage|ceed|pro_ceed|picanto|mohave|carnival|sedona|cerato|k2|k3|k5|k7|k9)\b/i,
      'lada' => /\b(granta|kalina|vesta|largus|priora|samara|niva|2101|2102|2103|2104|2105|2106|2107|2109|2110|2114|2115)\b/i,
      'renault' => /\b(logan|sandero|duster|megane|laguna|clio|symbol|captur|kaptur|arkana|koleos|espace|scenic|trafic|master)\b/i,
      'bmw' => /\b(1-series|2-series|3-series|4-series|5-series|6-series|7-series|x1|x2|x3|x4|x5|x6|x7|z4|i3|i8)\b/i,
      'mercedes' => /\b(a-class|b-class|c-class|e-class|s-class|cla|cls|slk|slk|sl|glc|gle|gls|gla|glk|ml|gl|viano|vito|sprinter)\b/i,
      'nissan' => /\b(almera|primera|qashqai|murano|pathfinder|x-trail|juke|note|micra|tiida|patrol|armada|frontier|terra|sentra|altima|maxima)\b/i,
      'honda' => /\b(civic|accord|cr-v|hr-v|pilot|odyssey|fit|jazz|city|br-v|hr-v|insight|legend|nsx|s2000)\b/i,
      'volkswagen' => /\b(golf|polo|passat|jetta|tiguan|touareg|bora| Santana|lavida|magotan|phaeton|up!|beetle|scirocco|eos|amarok|crafter|transporter)\b/i
    },

    # –ì–æ–¥—ã –≤—ã–ø—É—Å–∫–∞
    years: /\b(19|20)\d{2}\b/,

    # –ü—Ä–æ–±–µ–≥
    mileage: /\b(\d{1,3}(?:[ ,]\d{3})*|\d{4,6})\s*(–∫–º|km|—Ç—ã—Å\.?|—Ç—ã—Å—è—á|thousand)\b/i,

    # –¢–∏–ø—ã —É—Å–ª—É–≥
    services: {
      '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞' => /\b(–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞|–ø—Ä–æ–≤–µ—Ä–∫–∞|–æ—Å–º–æ—Ç—Ä|—Ç–µ—Å—Ç|–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞|—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)\b/i,
      '—Ä–µ–º–æ–Ω—Ç' => /\b(—Ä–µ–º–æ–Ω—Ç|–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ|–ø–æ—á–∏–Ω–∫–∞|–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ|—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ)\b/i,
      '–∑–∞–º–µ–Ω–∞' => /\b(–∑–∞–º–µ–Ω–∞|—É—Å—Ç–∞–Ω–æ–≤–∫–∞|–º–æ–Ω—Ç–∞–∂|–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞|—Å–º–µ–Ω–∏—Ç—å)\b/i,
      '—Ç–æ' => /\b(—Ç–æ|—Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ|—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ|—Å–µ—Ä–≤–∏—Å|–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ)\b/i,
      '–ø–æ–∫—Ä–∞—Å–∫–∞' => /\b(–ø–æ–∫—Ä–∞—Å–∫–∞|–æ–∫—Ä–∞—Å–∫–∞|–º–∞–ª—è—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã|–ø–æ–∫—Ä–∞—Å–∏—Ç—å|–æ–∫—Ä–∞—Å–∏—Ç—å)\b/i,
      '–∞–Ω—Ç–∏–∫–æ—Ä' => /\b(–∞–Ω—Ç–∏–∫–æ—Ä|–∞–Ω—Ç–∏–∫–æ—Ä—Ä–æ–∑–∏–π–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞|–∞–Ω—Ç–∏–∫–æ—Ä—Ä–æ–∑–∏—è|–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç –∫–æ—Ä—Ä–æ–∑–∏–∏)\b/i,
      '—Ç–æ—Ä–º–æ–∑–∞' => /\b(—Ç–æ—Ä–º–æ–∑|—Ç–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞|–∫–æ–ª–æ–¥–∫–∏|–¥–∏—Å–∫–∏|—Å—É–ø–ø–æ—Ä—Ç|—Ç—Ä—É–±–∫–∏|–∂–∏–¥–∫–æ—Å—Ç—å)\b/i,
      '–ø–æ–¥–≤–µ—Å–∫–∞' => /\b(–ø–æ–¥–≤–µ—Å–∫–∞|–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä|—Ä—ã—á–∞–≥|—Å—Ç–æ–π–∫–∞|–ø—Ä—É–∂–∏–Ω–∞|—à–∞—Ä–æ–≤–æ–π|—à–∞—Ä–æ–≤–∞—è –æ–ø–æ—Ä–∞|—Å–∞–π–ª–µ–Ω—Ç–±–ª–æ–∫)\b/i,
      '–¥–≤–∏–≥–∞—Ç–µ–ª—å' => /\b(–¥–≤–∏–≥–∞—Ç–µ–ª—å|–º–æ—Ç–æ—Ä|–¥–≤—Å|—Ä–µ–º–æ–Ω—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—è|–∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç)\b/i,
      '—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è' => /\b(–∫–æ—Ä–æ–±–∫–∞|–∫–ø–ø|–∞–∫–ø–ø|–º–∫–ø–ø|–≤–∞—Ä–∏–∞—Ç–æ—Ä|—Ä–æ–±–æ—Ç|—Å—Ü–µ–ø–ª–µ–Ω–∏–µ)\b/i,
      '–∫—É–∑–æ–≤' => /\b(–∫—É–∑–æ–≤|–±–∞–º–ø–µ—Ä|–∫—Ä—ã–ª–æ|–¥–≤–µ—Ä—å|–∫–∞–ø–æ—Ç|–∫—Ä—ã—à–∫–∞ –±–∞–≥–∞–∂–Ω–∏–∫–∞|–ø–æ—Ä–æ–≥|–∫—Ä—ã—à–∞)\b/i,
      '—ç–ª–µ–∫—Ç—Ä–∏–∫–∞' => /\b(—ç–ª–µ–∫—Ç—Ä–∏–∫–∞|—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ|–ø—Ä–æ–≤–æ–¥–∫–∞|–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä|—Å—Ç–∞—Ä—Ç–µ—Ä|–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä|–±–∞—Ç–∞—Ä–µ—è)\b/i,
      '—à–∏–Ω—ã' => /\b(—à–∏–Ω—ã|–∫–æ–ª–µ—Å–∞|–¥–∏—Å–∫–∏|—à–∏–Ω–∞|–∫–æ–ª–µ—Å–æ|–∑–∞–º–µ–Ω–∞ —Ä–µ–∑–∏–Ω—ã|—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂)\b/i,
      '–º–∞—Å–ª–æ' => /\b(–º–∞—Å–ª–æ|–∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞|–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä|–º–∞—Å–ª–æ—Å—ä–µ–º–Ω—ã–µ)\b/i,
      '—Ñ–∏–ª—å—Ç—Ä—ã' => /\b(—Ñ–∏–ª—å—Ç—Ä|–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä|—Å–∞–ª–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä|—Ç–æ–ø–ª–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä|–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä)\b/i
    }
  }

  # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏
  CAR_CLASSES = {
    1 => { # –ú–∞–ª—ã–µ –∏ —Å—Ä–µ–¥–Ω–∏–µ –∞–≤—Ç–æ
      brands: ['lada', 'daewoo', 'renault', 'chevrolet'],
      models: ['rio', 'solaris', 'logan', 'aveo', 'granta', 'kalina', 'vesta', 'priora', 'almera', 'sandero'],
      description: '–º–∞–ª—ã–µ –∏ —Å—Ä–µ–¥–Ω–∏–µ –∞–≤—Ç–æ'
    },
    2 => { # –ë–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å –∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä—ã
      brands: ['toyota', 'honda', 'hyundai', 'kia', 'nissan'],
      models: ['camry', 'accord', 'optima', 'creta', 'qashqai', 'sorento', 'tucson', 'sportage', 'elantra', 'sonata'],
      description: '–±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å –∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä—ã'
    },
    3 => { # –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å–∫–∏–µ, –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–∏, –º–∏–Ω–∏–≤–µ–Ω—ã
      brands: ['bmw', 'mercedes', 'land rover', 'volvo', 'lexus'],
      models: ['7-series', 's-class', 'range rover', 'xc90', 'lx', 'land cruiser', 'prado', 'x5', 'x7', 'gle', 'gls'],
      description: '–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å–∫–∏–µ, –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–∏, –º–∏–Ω–∏–≤–µ–Ω—ã, –º–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å—ã'
    }
  }

  
  # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
  def extract_car_info(conversation_history)
    Application.logger.debug "Extracting car info from conversation"

    car_info = {
      make_model: extract_make_model(conversation_history),
      year: extract_year(conversation_history),
      mileage: extract_mileage(conversation_history)
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    car_class = determine_car_class(car_info[:make_model])
    car_info[:class] = car_class[:class]
    car_info[:class_description] = car_class[:description]

    Application.logger.debug "Car info extracted: #{car_info.inspect}"
    car_info
  end

  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Å–ª—É–≥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
  def extract_services(conversation_history)
    Application.logger.debug "Extracting services from conversation"

    services = []
    conversation_history ||= []
    conversation_history.each do |message|
      next unless message[:role] == 'user'

      message_services = extract_services_from_text(message[:content])
      services.concat(message_services)
    end

    services = services.uniq
    Application.logger.debug "Services extracted: #{services.inspect}"
    services
  end

  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
  def extract_dialog_context(conversation_history)
    return "" if conversation_history.empty?

    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_messages = conversation_history.select { |msg| msg[:role] == 'user' }
    return "" if user_messages.empty?

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    last_message = user_messages.last[:content]

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
    if last_message.length <= 200
      last_message
    else
      # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      last_message[0..197] + "..."
    end
  end

  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–∑–≤–∞–Ω–Ω–æ–π –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
  def extract_last_total_cost(conversation_history)
    return nil unless conversation_history&.any?

    # –ò—â–µ–º –≤ –æ—Ç–≤–µ—Ç–∞—Ö –±–æ—Ç–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    conversation_history.reverse.each do |message|
      next unless message[:role] == 'assistant'

      text = message[:content]
      # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–ò—Ç–æ–≥–æ: X —Ä—É–±", "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: X —Ä—É–±", "–°—Ç–æ–∏–º–æ—Å—Ç—å: X —Ä—É–±"
      total_patterns = [
        /(?:–∏—Ç–æ–≥–æ|–æ–±—â–∞—è\s+—Å—Ç–æ–∏–º–æ—Å—Ç—å|—Å—Ç–æ–∏–º–æ—Å—Ç—å)\s*[:\-]?\s*(\d[\d\s]*)\s*(?:—Ä—É–±|—Ä\.|—Ä—É–±\.|—Ä)/i,
        /(?:–∏—Ç–æ–≥–æ|–æ–±—â–∞—è\s+—Å—Ç–æ–∏–º–æ—Å—Ç—å|—Å—Ç–æ–∏–º–æ—Å—Ç—å)\s*[:\-]?\s*(\d[\d\s]*)\s*(?:—Ç—ã—Å|—Ç—ã—Å—è—á|thousand)\s*(?:—Ä—É–±|—Ä\.|—Ä—É–±\.|—Ä)/i
      ]

      total_patterns.each do |pattern|
        match = text.match(pattern)
        if match
          price_str = match[1]
          price_num = parse_cost_string(price_str)
          return format_cost(price_num) if price_num && price_num > 0
        end
      end
    end

    nil
  end

  # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –≤—ã–∂–∏–º–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
  def extract_conversation_summary(conversation_history)
    return "" unless conversation_history&.any?

    summary_lines = []
    message_count = 0

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    limited_history = conversation_history.last(8) # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–æ–æ–±—â–µ–Ω–∏–π

    limited_history.each do |message|
      next unless message[:content] && !message[:content].strip.empty?

      role_symbol = message[:role] == 'user' ? 'üë§' : 'ü§ñ'
      content = truncate_message(message[:content], 150) # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤

      summary_lines << "#{role_symbol} #{content}"
      message_count += 1
    end

    return "" if summary_lines.empty?

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
    summary = "**–ü–æ—Å–ª–µ–¥–Ω–∏–µ #{message_count} —Å–æ–æ–±—â–µ–Ω–∏–π:**\n"
    summary += summary_lines.join("\n")

    summary
  end

  private

  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  def extract_make_model(conversation_history)
    make_model = { make: nil, model: nil }

    conversation_history.each do |message|
      next unless message[:role] == 'user'
      text = message[:content]

      # –ò—â–µ–º –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è
      brand_match = text.match(PATTERNS[:car_brands])
      if brand_match
        make_model[:make] = brand_match[1].downcase

        # –ò—â–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–∞—Ä–∫–∏
        model_pattern = PATTERNS[:car_models][make_model[:make]]
        if model_pattern
          model_match = text.match(model_pattern)
          make_model[:model] = model_match[1] if model_match
        end

        break # –ù–∞—à–ª–∏ –º–∞—Ä–∫—É, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
      end
    end

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if make_model[:make] && make_model[:model]
      "#{make_model[:make].capitalize} #{make_model[:model].capitalize}"
    elsif make_model[:make]
      make_model[:make].capitalize
    else
      nil
    end
  end

  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞
  def extract_year(conversation_history)
    conversation_history.each do |message|
      next unless message[:role] == 'user'

      year_match = message[:content].match(PATTERNS[:years])
      return year_match[0] if year_match && valid_year?(year_match[0])
    end
    nil
  end

  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞
  def extract_mileage(conversation_history)
    conversation_history.each do |message|
      next unless message[:role] == 'user'

      mileage_match = message[:content].match(PATTERNS[:mileage])
      if mileage_match
        # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–µ–≥
        mileage = mileage_match[1].gsub(/[ ,]/, '')
        if valid_mileage?(mileage)
          return format_mileage(mileage)
        end
      end
    end
    nil
  end

  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –∏–∑ —Ç–µ–∫—Å—Ç–∞
  def extract_services_from_text(text)
    services = []

    PATTERNS[:services].each do |service_type, pattern|
      if text.match(pattern)
        services << service_type.capitalize
      end
    end

    services
  end

  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  def determine_car_class(make_model)
    return { class: nil, description: nil } unless make_model

    make_model_lower = make_model.downcase

    CAR_CLASSES.each do |class_num, class_info|
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –º–∞—Ä–∫–µ
      if class_info[:brands] && class_info[:brands].any? { |brand| make_model_lower.include?(brand) }
        return { class: class_num, description: class_info[:description] }
      end

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –º–æ–¥–µ–ª–∏
      if class_info[:models] && class_info[:models].any? { |model| make_model_lower.include?(model) }
        return { class: class_num, description: class_info[:description] }
      end
    end

    { class: nil, description: '—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ' }
  end

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≥–æ–¥–∞
  def valid_year?(year)
    year_num = year.to_i
    year_num >= 1970 && year_num <= Time.now.year + 1
  end

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–µ–≥–∞
  def valid_mileage?(mileage)
    mileage_num = mileage.to_i
    mileage_num >= 0 && mileage_num <= 1000000
  end

  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞
  def format_mileage(mileage)
    mileage_num = mileage.to_i
    if mileage_num >= 1000
      "#{mileage_num / 1000} #{mileage_num % 1000 >= 100 ? '' : ' '}000 –∫–º"
    else
      "#{mileage_num} –∫–º"
    end
  end

  # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
  def parse_cost_string(cost_str)
    return nil unless cost_str

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –ø—Ä–æ–±–µ–ª–æ–≤
    clean_cost = cost_str.gsub(/[^\d\s]/, '').strip

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
    clean_cost.gsub!(/\s+/, '')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç—ã—Å—è—á–∏
    if clean_cost.length >= 4 && clean_cost.to_i > 1000
      clean_cost.to_i
    else
      clean_cost.to_i
    end
  rescue StandardError => e
    Application.logger.warn "Error parsing cost '#{cost_str}': #{e.message}"
    nil
  end

  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  def format_cost(cost)
    return nil unless cost

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    formatted = cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1 ').reverse
    "#{formatted} —Ä—É–±."
  end

  # –û–±—Ä–µ–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
  def truncate_message(message, max_length)
    return "" unless message
    return message if message.length <= max_length

    truncated = message[0..(max_length - 3)]
    truncated += "..."
    truncated
  end
end