# frozen_string_literal: true

require 'ruby_llm'
require 'logger'
require_relative 'request_detector'
require_relative 'dialog_analyzer'
require_relative 'telegram_markdown_sanitizer'

class LLMClient
  MAX_RETRIES = 1

  def initialize(conversation_manager = nil, logger = nil)
    @conversation_manager = conversation_manager || ConversationManager.new
    @logger = logger || @logger
    @markdown_sanitizer = TelegramMarkdownSanitizer.new(logger: @logger)
  end

  # –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
  def send_message_to_user(user_info, message_content, additional_context = nil)
    # Trace –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    caller_info = caller_locations(1, 1).first
    @logger.info "üîç LLM CLIENT TRACE: Called from #{caller_info.path}:#{caller_info.lineno}"
    @logger.info "Sending message to user #{user_info[:id]}"
    @logger.debug "üîç OUTGOING MESSAGE TRACE:"
    @logger.debug "  User: #{user_info[:id]} (#{user_info[:first_name]} #{user_info[:last_name]})"
    @logger.debug "  Message length: #{message_content.length} chars"
    @logger.debug "  Message preview: #{message_content[0..100].inspect}#{'...' if message_content.length > 100}"
    @logger.debug "  Additional context: #{additional_context ? 'YES' : 'NO'}"

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_chat = @conversation_manager.get_or_create_chat(user_info)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    @logger.debug "Using persistent chat ##{db_chat.id}"

    retries = 0
    begin
      @logger.info "LLMClient using model: #{AppConfig.llm_model}, provider: #{AppConfig.llm_provider}"

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
      chat = db_chat.with_model(AppConfig.llm_model, provider: AppConfig.llm_provider.to_sym)

      # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      combined_system_prompt = build_combined_system_prompt

      # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      if additional_context
        contextual_content = "#{additional_context}\n\n#{message_content}"
        message_content = contextual_content
      end

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      chat.with_instructions(combined_system_prompt, replace: true)

      # –î–æ–±–∞–≤–ª—è–µ–º RequestDetector tool –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω admin_chat_id
      if AppConfig.admin_chat_id
        request_detector = create_enriched_request_detector(db_chat, user_info)
        chat.with_tool(request_detector)
      end

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - acts_as_chat –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      response = chat.ask(message_content)

      @logger.info "Response received for user #{user_info[:id]}, tokens: #{response.input_tokens + response.output_tokens}"

      # –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º markdown –¥–ª—è Telegram API
      sanitized_content = @markdown_sanitizer.sanitize(response.content)

      # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
      if response.content != sanitized_content
        @logger.debug "Markdown sanitization applied: #{response.content.length} -> #{sanitized_content.length} chars"
        @logger.debug "Original: #{response.content[0..100].inspect}#{'...' if response.content.length > 100}"
        @logger.debug "Sanitized: #{sanitized_content[0..100].inspect}#{'...' if sanitized_content.length > 100}"
      end

      sanitized_content

    rescue RubyLLM::ConfigurationError => e
      @logger.error "RubyLLM configuration error: #{e.message}"
      raise e
    rescue RubyLLM::ModelNotFoundError => e
      @logger.error "Model not found error: #{e.message}"
      raise e
    rescue RubyLLM::Error => e
      @logger.error "RubyLLM API error: #{e.message}"
      raise e
    rescue StandardError => e
      retries += 1
      if retries <= MAX_RETRIES
        @logger.warn "LLM client retry #{retries}/#{MAX_RETRIES}: #{e.message}"
        @logger.warn "Backtrace:\n#{e.backtrace.join("\n")}" if retries == MAX_RETRIES
        sleep(1)
        retry
      else
        @logger.error "Failed to send message to RubyLLM after #{MAX_RETRIES} retries: #{e.message}"
        @logger.error "Backtrace:\n#{e.backtrace.join("\n")}"
        raise e
      end
    end
  end

  # –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  def send_message(messages, user_info = nil)
    return "No user info provided" unless user_info

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    last_message = messages.is_a?(Array) ? messages.last : messages
    return "No message content" unless last_message && last_message[:content]

    send_message_to_user(user_info, last_message[:content])
  end

  private

  def build_combined_system_prompt
    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä [COMPANY_INFO] –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏
    prompt_with_company = AppConfig.system_prompt.gsub('[COMPANY_INFO]', AppConfig.company_info)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
    "#{prompt_with_company}\n\n---\n\n## –ü–†–ê–ô–°-–õ–ò–°–¢\n\n#{AppConfig.formatted_price_list}"
  end

  def create_enriched_request_detector(chat, user_info)
    @logger.debug "Creating enriched RequestDetector for user #{user_info[:id]}"

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ conversation_manager
    messages_array = @conversation_manager.get_history(user_info[:id])

    dialog_analyzer = DialogAnalyzer.new

    car_info = dialog_analyzer.extract_car_info(messages_array)
    required_services = dialog_analyzer.extract_services(messages_array)
    dialog_context = dialog_analyzer.extract_dialog_context(messages_array)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–∞–∑–≤–∞–Ω–Ω—É—é –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_cost_to_user = dialog_analyzer.extract_last_total_cost(messages_array)
    @logger.debug "Extracted total cost to user: #{total_cost_to_user}" if total_cost_to_user

    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    conversation_summary = dialog_analyzer.extract_conversation_summary(messages_array)
    @logger.debug "Generated conversation summary with #{conversation_summary.length} characters"

    # –ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å - –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–∞—Ö –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    cost_calculation = nil
    @logger.debug "Skipping cost calculation - using extracted total cost: #{total_cost_to_user}"

    # –°–æ–∑–¥–∞–µ–º RequestDetector
    detector = RequestDetector.new

    # –û–±–æ–≥–∞—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    detector.enrich_with(
      car_info: car_info,
      required_services: required_services,
      cost_calculation: cost_calculation,
      dialog_context: dialog_context,
      total_cost_to_user: total_cost_to_user,
      conversation_summary: conversation_summary
    )

    detector
  rescue StandardError => e
    @logger.error "Error creating enriched RequestDetector: #{e.message}"
    @logger.error "Backtrace: #{e.backtrace.first(5).join("\n")}"
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π RequestDetector –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    RequestDetector.new
  end
end